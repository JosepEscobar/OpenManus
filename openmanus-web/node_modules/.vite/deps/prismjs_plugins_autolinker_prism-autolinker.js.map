{
  "version": 3,
  "sources": ["../../../../node_modules/prismjs/plugins/autolinker/prism-autolinker.js"],
  "sourcesContent": ["(function () {\n\n\tif (typeof Prism === 'undefined') {\n\t\treturn;\n\t}\n\n\tvar url = /\\b([a-z]{3,7}:\\/\\/|tel:)[\\w\\-+%~/.:=&!$'()*,;@]+(?:\\?[\\w\\-+%~/.:=?&!$'()*,;@]*)?(?:#[\\w\\-+%~/.:#=?&!$'()*,;@]*)?/;\n\tvar email = /\\b\\S+@[\\w.]+[a-z]{2}/;\n\tvar linkMd = /\\[([^\\]]+)\\]\\(([^)]+)\\)/;\n\n\t// Tokens that may contain URLs and emails\n\tvar candidates = ['comment', 'url', 'attr-value', 'string'];\n\n\tPrism.plugins.autolinker = {\n\t\tprocessGrammar: function (grammar) {\n\t\t\t// Abort if grammar has already been processed\n\t\t\tif (!grammar || grammar['url-link']) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPrism.languages.DFS(grammar, function (key, def, type) {\n\t\t\t\tif (candidates.indexOf(type) > -1 && !Array.isArray(def)) {\n\t\t\t\t\tif (!def.pattern) {\n\t\t\t\t\t\tdef = this[key] = {\n\t\t\t\t\t\t\tpattern: def\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tdef.inside = def.inside || {};\n\n\t\t\t\t\tif (type == 'comment') {\n\t\t\t\t\t\tdef.inside['md-link'] = linkMd;\n\t\t\t\t\t}\n\t\t\t\t\tif (type == 'attr-value') {\n\t\t\t\t\t\tPrism.languages.insertBefore('inside', 'punctuation', { 'url-link': url }, def);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdef.inside['url-link'] = url;\n\t\t\t\t\t}\n\n\t\t\t\t\tdef.inside['email-link'] = email;\n\t\t\t\t}\n\t\t\t});\n\t\t\tgrammar['url-link'] = url;\n\t\t\tgrammar['email-link'] = email;\n\t\t}\n\t};\n\n\tPrism.hooks.add('before-highlight', function (env) {\n\t\tPrism.plugins.autolinker.processGrammar(env.grammar);\n\t});\n\n\tPrism.hooks.add('wrap', function (env) {\n\t\tif (/-link$/.test(env.type)) {\n\t\t\tenv.tag = 'a';\n\n\t\t\tvar href = env.content;\n\n\t\t\tif (env.type == 'email-link' && href.indexOf('mailto:') != 0) {\n\t\t\t\thref = 'mailto:' + href;\n\t\t\t} else if (env.type == 'md-link') {\n\t\t\t\t// Markdown\n\t\t\t\tvar match = env.content.match(linkMd);\n\n\t\t\t\thref = match[2];\n\t\t\t\tenv.content = match[1];\n\t\t\t}\n\n\t\t\tenv.attributes.href = href;\n\n\t\t\t// Silently catch any error thrown by decodeURIComponent (#1186)\n\t\t\ttry {\n\t\t\t\tenv.content = decodeURIComponent(env.content);\n\t\t\t} catch (e) { /* noop */ }\n\t\t}\n\t});\n\n}());\n"],
  "mappings": ";CAAC,WAAY;AAEZ,MAAI,OAAO,UAAU,aAAa;AACjC;AAAA,EACD;AAEA,MAAI,MAAM;AACV,MAAI,QAAQ;AACZ,MAAI,SAAS;AAGb,MAAI,aAAa,CAAC,WAAW,OAAO,cAAc,QAAQ;AAE1D,QAAM,QAAQ,aAAa;AAAA,IAC1B,gBAAgB,SAAU,SAAS;AAElC,UAAI,CAAC,WAAW,QAAQ,UAAU,GAAG;AACpC;AAAA,MACD;AACA,YAAM,UAAU,IAAI,SAAS,SAAU,KAAK,KAAK,MAAM;AACtD,YAAI,WAAW,QAAQ,IAAI,IAAI,MAAM,CAAC,MAAM,QAAQ,GAAG,GAAG;AACzD,cAAI,CAAC,IAAI,SAAS;AACjB,kBAAM,KAAK,GAAG,IAAI;AAAA,cACjB,SAAS;AAAA,YACV;AAAA,UACD;AAEA,cAAI,SAAS,IAAI,UAAU,CAAC;AAE5B,cAAI,QAAQ,WAAW;AACtB,gBAAI,OAAO,SAAS,IAAI;AAAA,UACzB;AACA,cAAI,QAAQ,cAAc;AACzB,kBAAM,UAAU,aAAa,UAAU,eAAe,EAAE,YAAY,IAAI,GAAG,GAAG;AAAA,UAC/E,OAAO;AACN,gBAAI,OAAO,UAAU,IAAI;AAAA,UAC1B;AAEA,cAAI,OAAO,YAAY,IAAI;AAAA,QAC5B;AAAA,MACD,CAAC;AACD,cAAQ,UAAU,IAAI;AACtB,cAAQ,YAAY,IAAI;AAAA,IACzB;AAAA,EACD;AAEA,QAAM,MAAM,IAAI,oBAAoB,SAAU,KAAK;AAClD,UAAM,QAAQ,WAAW,eAAe,IAAI,OAAO;AAAA,EACpD,CAAC;AAED,QAAM,MAAM,IAAI,QAAQ,SAAU,KAAK;AACtC,QAAI,SAAS,KAAK,IAAI,IAAI,GAAG;AAC5B,UAAI,MAAM;AAEV,UAAI,OAAO,IAAI;AAEf,UAAI,IAAI,QAAQ,gBAAgB,KAAK,QAAQ,SAAS,KAAK,GAAG;AAC7D,eAAO,YAAY;AAAA,MACpB,WAAW,IAAI,QAAQ,WAAW;AAEjC,YAAI,QAAQ,IAAI,QAAQ,MAAM,MAAM;AAEpC,eAAO,MAAM,CAAC;AACd,YAAI,UAAU,MAAM,CAAC;AAAA,MACtB;AAEA,UAAI,WAAW,OAAO;AAGtB,UAAI;AACH,YAAI,UAAU,mBAAmB,IAAI,OAAO;AAAA,MAC7C,SAAS,GAAG;AAAA,MAAa;AAAA,IAC1B;AAAA,EACD,CAAC;AAEF,GAAE;",
  "names": []
}
